/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// CommandResults struct for CommandResults
type CommandResults struct {
	ActivityResults []ActivityResult `json:"activityResults,omitempty"`
	SignalResults []SignalResult `json:"signalResults,omitempty"`
	TimerResults []TimerResult `json:"timerResults,omitempty"`
	OnQueryAttributeChangeResults []OnQueryAttributeChangeResult `json:"onQueryAttributeChangeResults,omitempty"`
}

// NewCommandResults instantiates a new CommandResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandResults() *CommandResults {
	this := CommandResults{}
	return &this
}

// NewCommandResultsWithDefaults instantiates a new CommandResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandResultsWithDefaults() *CommandResults {
	this := CommandResults{}
	return &this
}

// GetActivityResults returns the ActivityResults field value if set, zero value otherwise.
func (o *CommandResults) GetActivityResults() []ActivityResult {
	if o == nil || o.ActivityResults == nil {
		var ret []ActivityResult
		return ret
	}
	return o.ActivityResults
}

// GetActivityResultsOk returns a tuple with the ActivityResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandResults) GetActivityResultsOk() ([]ActivityResult, bool) {
	if o == nil || o.ActivityResults == nil {
		return nil, false
	}
	return o.ActivityResults, true
}

// HasActivityResults returns a boolean if a field has been set.
func (o *CommandResults) HasActivityResults() bool {
	if o != nil && o.ActivityResults != nil {
		return true
	}

	return false
}

// SetActivityResults gets a reference to the given []ActivityResult and assigns it to the ActivityResults field.
func (o *CommandResults) SetActivityResults(v []ActivityResult) {
	o.ActivityResults = v
}

// GetSignalResults returns the SignalResults field value if set, zero value otherwise.
func (o *CommandResults) GetSignalResults() []SignalResult {
	if o == nil || o.SignalResults == nil {
		var ret []SignalResult
		return ret
	}
	return o.SignalResults
}

// GetSignalResultsOk returns a tuple with the SignalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandResults) GetSignalResultsOk() ([]SignalResult, bool) {
	if o == nil || o.SignalResults == nil {
		return nil, false
	}
	return o.SignalResults, true
}

// HasSignalResults returns a boolean if a field has been set.
func (o *CommandResults) HasSignalResults() bool {
	if o != nil && o.SignalResults != nil {
		return true
	}

	return false
}

// SetSignalResults gets a reference to the given []SignalResult and assigns it to the SignalResults field.
func (o *CommandResults) SetSignalResults(v []SignalResult) {
	o.SignalResults = v
}

// GetTimerResults returns the TimerResults field value if set, zero value otherwise.
func (o *CommandResults) GetTimerResults() []TimerResult {
	if o == nil || o.TimerResults == nil {
		var ret []TimerResult
		return ret
	}
	return o.TimerResults
}

// GetTimerResultsOk returns a tuple with the TimerResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandResults) GetTimerResultsOk() ([]TimerResult, bool) {
	if o == nil || o.TimerResults == nil {
		return nil, false
	}
	return o.TimerResults, true
}

// HasTimerResults returns a boolean if a field has been set.
func (o *CommandResults) HasTimerResults() bool {
	if o != nil && o.TimerResults != nil {
		return true
	}

	return false
}

// SetTimerResults gets a reference to the given []TimerResult and assigns it to the TimerResults field.
func (o *CommandResults) SetTimerResults(v []TimerResult) {
	o.TimerResults = v
}

// GetOnQueryAttributeChangeResults returns the OnQueryAttributeChangeResults field value if set, zero value otherwise.
func (o *CommandResults) GetOnQueryAttributeChangeResults() []OnQueryAttributeChangeResult {
	if o == nil || o.OnQueryAttributeChangeResults == nil {
		var ret []OnQueryAttributeChangeResult
		return ret
	}
	return o.OnQueryAttributeChangeResults
}

// GetOnQueryAttributeChangeResultsOk returns a tuple with the OnQueryAttributeChangeResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandResults) GetOnQueryAttributeChangeResultsOk() ([]OnQueryAttributeChangeResult, bool) {
	if o == nil || o.OnQueryAttributeChangeResults == nil {
		return nil, false
	}
	return o.OnQueryAttributeChangeResults, true
}

// HasOnQueryAttributeChangeResults returns a boolean if a field has been set.
func (o *CommandResults) HasOnQueryAttributeChangeResults() bool {
	if o != nil && o.OnQueryAttributeChangeResults != nil {
		return true
	}

	return false
}

// SetOnQueryAttributeChangeResults gets a reference to the given []OnQueryAttributeChangeResult and assigns it to the OnQueryAttributeChangeResults field.
func (o *CommandResults) SetOnQueryAttributeChangeResults(v []OnQueryAttributeChangeResult) {
	o.OnQueryAttributeChangeResults = v
}

func (o CommandResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivityResults != nil {
		toSerialize["activityResults"] = o.ActivityResults
	}
	if o.SignalResults != nil {
		toSerialize["signalResults"] = o.SignalResults
	}
	if o.TimerResults != nil {
		toSerialize["timerResults"] = o.TimerResults
	}
	if o.OnQueryAttributeChangeResults != nil {
		toSerialize["onQueryAttributeChangeResults"] = o.OnQueryAttributeChangeResults
	}
	return json.Marshal(toSerialize)
}

type NullableCommandResults struct {
	value *CommandResults
	isSet bool
}

func (v NullableCommandResults) Get() *CommandResults {
	return v.value
}

func (v *NullableCommandResults) Set(val *CommandResults) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandResults) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandResults(val *CommandResults) *NullableCommandResults {
	return &NullableCommandResults{value: val, isSet: true}
}

func (v NullableCommandResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


